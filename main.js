/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

// main.ts
"use strict";
var obsidian = require("obsidian");
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function ansiWordBound(c) {
  return c === " " || c === "\n" || c === "\r" || c === "	";
}
function pageCount(text, options) {
  var words = 0, start = 0, end = text.length - 1, wordBound, i;
  options = options || {};
  options.wordsPerPage = options.wordsPerPage || 300;
  wordBound = options.wordBound || ansiWordBound;
  while (wordBound(text[start]))
    start++;
  while (wordBound(text[end]))
    end--;
  for (i = start; i <= end; ) {
    for (; i <= end && !wordBound(text[i]); i++)
      ;
    words++;
    for (; i <= end && wordBound(text[i]); i++)
      ;
  }
  var pages = words / options.wordsPerPage;
  var length = pages;
  var displayed = pages.toLocaleString(void 0, { maximumFractionDigits: 1 });
  return {
    text: displayed + " p.",
    pages,
    length,
    words
  };
}
var pageCount_1 = pageCount;
var pageCount$1 = pageCount_1;
var PageCount = function(_super) {
  __extends(PageCount2, _super);
  function PageCount2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this.codeMirror = function(cm) {
      cm.on("change", _this.calculatePageCount);
    };
    _this.calculatePageCount = function(e) {
      var _a, _b;
      var activeLeaf = (_a = _this.app.workspace.activeLeaf) !== null && _a !== void 0 ? _a : null;
      try {
        if ((_b = activeLeaf === null || activeLeaf === void 0 ? void 0 : activeLeaf.view) === null || _b === void 0 ? void 0 : _b.data) {
          var stats = pageCount$1(activeLeaf.view.data, {
            wordsPerPage: _this.settings.pageLength
          });
          _this.statusBar.setText("" + stats.text);
        } else {
          _this.statusBar.setText("");
        }
      } catch (e2) {
        console.log(e2.message);
      }
    };
    return _this;
  }
  PageCount2.prototype.onload = function() {
    return __awaiter(this, void 0, void 0, function() {
      var _a;
      return __generator(this, function(_b) {
        switch (_b.label) {
          case 0:
            _a = this;
            return [4, this.loadData()];
          case 1:
            _a.settings = _b.sent() || new PageCountSettings();
            this.statusBar = this.addStatusBarItem();
            this.statusBar.setText("");
            this.addSettingTab(new PageCountSettingsTab(this.app, this));
            this.registerEvent(this.app.workspace.on("file-open", this.calculatePageCount));
            this.registerEvent(this.app.on("codemirror", this.codeMirror));
            return [2];
        }
      });
    });
  };
  return PageCount2;
}(obsidian.Plugin);
var PageCountSettings = function() {
  function PageCountSettings2() {
    this.pageLength = 300;
  }
  return PageCountSettings2;
}();
var PageCountSettingsTab = function(_super) {
  __extends(PageCountSettingsTab2, _super);
  function PageCountSettingsTab2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  PageCountSettingsTab2.prototype.display = function() {
    var containerEl = this.containerEl;
    var plugin = this.plugin;
    containerEl.empty();
    new obsidian.Setting(containerEl).setName("Page Count").setDesc("Words per page used for count (default: 300).").addText(function(text) {
      return text.setPlaceholder("Example: 300").setValue((plugin.settings.pageLength || "") + "").onChange(function(value) {
        console.log("Page Length: " + value);
        plugin.settings.pageLength = parseInt(value.trim());
        plugin.saveData(plugin.settings);
        plugin.calculatePageCount();
      });
    });
  };
  return PageCountSettingsTab2;
}(obsidian.PluginSettingTab);
module.exports = PageCount;
/*!
 * page-count
 * Copyright (c) ReaderGuy42 | Ash Cull <ashpcull@yahoo.com>
 * MIT Licensed
 */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
